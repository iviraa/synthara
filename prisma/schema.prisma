generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique // match kinde userid
  email String @unique

  File      File[]
  Message   Message[]
  Workspace Workspace[]
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Workspace {
  id       String @id @default(cuid())
  name     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  File    File[]
  Message Message[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url     String
  key     String
  message Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  File        File?      @relation(fields: [fileId], references: [id])
  fileId      String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
}
